using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static UnityEngine.RuleTile.TilingRuleOutput;

public class spyware : enemy
{
    public float speed;
    public float chaseDistance;
    public float stopDistance;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;

    private float yPositionThreshold = 0.3f;

    private int health = 100;
    public GameObject target;
    public PlayerController playerController;
    private float targetDistance;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    private bool isAlive;
    public bool isAttacking;

    [SerializeField]
    private playerDataSo playerDataSo;


    private Coroutine attackCoroutine;
    void Start()
    {
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();
        isAlive = true;


    }

    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {
            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if ((targetDistance < chaseDistance && targetDistance > stopDistance) && isAlive)
            {
                chasePlayer();

                if (attackCoroutine != null)
                {
                    StopCoroutine(attackCoroutine);
                    attackCoroutine = null;
                }
            }
            else
            {
                stopChasePlayer();

                if (health > 0)
                {
                    if (attackCoroutine == null)
                    {
                        if (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold)
                            attackCoroutine = StartCoroutine(attack());
                    }
                }

            }

        }
    }
    void chasePlayer()
    {
        float newXPosition = transform.position.x;


        if (playerController.canJump)
        {
            float newYPosition = target.transform.position.y;
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);


            transform.position = Vector2.MoveTowards(transform.position, target.transform.position, speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }
        else
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            transform.position = Vector2.MoveTowards(transform.position, new Vector2(target.transform.position.x, transform.position.y), speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }


    }
    void stopChasePlayer()
    {
        animate.SetFloat("Speed", 0);

        if (isAlive)
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            if (playerController.canJump)
            {
                if ((Mathf.Abs(transform.position.y - target.transform.position.y) > yPositionThreshold) && isAlive)
                {
                    // Move towards the player's Y position while keeping the X position unchanged
                    float newXPosition = transform.position.x;
                    float newYPosition = Mathf.MoveTowards(transform.position.y, target.transform.position.y, speed * Time.deltaTime);
                    animate.SetFloat("Speed", 1);
                    transform.position = new Vector2(newXPosition, newYPosition);
                }
            }

        }
    }

    public IEnumerator attack()
    {

        yield return new WaitForSeconds(2f);


        if (health > 0)
        {

            foreach (UnityEngine.Transform child in targetObject.transform)
            {
                BoxCollider2D boxCollider = child.GetComponent<BoxCollider2D>();
                if (boxCollider != null)
                {
                    boxCollider.enabled = true;

                }
            }

            animate.SetTrigger("Attack");

            yield return new WaitForSeconds(0.2f);
            foreach (UnityEngine.Transform child in targetObject.transform)
            {
                BoxCollider2D boxCollider = child.GetComponent<BoxCollider2D>();
                if (boxCollider != null)
                {
                    boxCollider.enabled = false;

                }
            }


        }

        attackCoroutine = null;
    }

    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            BoxCollider2D playerCapsuleCollider = GetComponent<BoxCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }


    public void onHit()
    {

        if (currentCooldown <= 0f)
        {

            animate.SetTrigger("Hit");
            animate.SetFloat("Speed", 0);

            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {

                    renderer.material.color = Color.red;

                }
            }




            currentCooldown = hitCooldown;
            health -= playerDataSo.playerDamage;

        }

    }

    public void onHitDone()
    {

        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;
            }
        }


        if (health <= 0)
        {
            isAlive = false;
            targetObject.GetComponent<BoxCollider2D>().enabled = false;
            animate.SetTrigger("Death");


        }
    }

    public void alertObserver(string message)
    {
        if (message == "AttackEnded")
        {
            isAttacking = false;
        }

        if (message == "isHitEnded")
        {
            onHitDone();
        }
    }

    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            gameManager.enemyKilled++;
            Debug.Log(gameManager.enemyKilled);
            spawnCoin();


        }
    }

    public void callStopAttack()
    {
        alertObserver("AttackEnded");

    }
    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }

}
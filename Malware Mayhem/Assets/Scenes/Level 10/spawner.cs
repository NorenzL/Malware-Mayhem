using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class spawner : MonoBehaviour
{
    // Start is called before the first frame update
    [SerializeField]
    private GameObject[] enemyPrefabs;
    
    [SerializeField]
    public int numberOfEnemy = 0;
    Animator virusAnimator;
    void Start()
    {
        virusAnimator = enemyPrefabs[0].GetComponent<Animator>();
        virusAnimator.SetBool("On", true);
        StartCoroutine(spawnEnemy());
        
    }

    // Update is called once per frame
    private IEnumerator spawnEnemy()
    {
        while (true)
        {
            while (numberOfEnemy < 5)
            {
                yield return new WaitForSeconds(0);
                GameObject randomEnemyPrefab = enemyPrefabs[Random.Range(0, enemyPrefabs.Length)];
                GameObject newEnemy;
                if (randomEnemyPrefab == enemyPrefabs[12]) // if spawned enemy is MITM
                {
                    newEnemy = Instantiate(randomEnemyPrefab, new Vector3(Random.Range(-8.11f, 8.05f), Random.Range(-4.94f, -0.43f), 0), Quaternion.identity);
                }

                else
                {
                    newEnemy = Instantiate(randomEnemyPrefab, new Vector3(Random.Range(9f, 15f), Random.Range(-1f, -4f), 0), Quaternion.identity);
                }
                
                EnableEnemyScript(newEnemy);
                numberOfEnemy++;
              

            }
            yield return new WaitUntil(() => numberOfEnemy <= 2);
        }

    }

    private void EnableEnemyScript(GameObject enemy)
    {
        
        virusLastLevel virusLastLevel = enemy.GetComponent<virusLastLevel>();
        sqliLastLevel sqliLastLevel = enemy.GetComponent<sqliLastLevel>();
        rootkitSummonLastLevel rootkitSummonLastLevel = enemy.GetComponent<rootkitSummonLastLevel>();
        spywareLastLevel spywareLastLevel = enemy.GetComponent<spywareLastLevel>();
        ransomwareLastLevel ransomwareLastLevel = enemy.GetComponent<ransomwareLastLevel>();
        phishingMeleeLastLevel phishingMeleeLastLevel = enemy.GetComponent<phishingMeleeLastLevel>();
        phishingRangeLastLevel phishingRangeLastLevel = enemy.GetComponent<phishingRangeLastLevel>();
        phishingMageLastLevel phishingMageLastLevel = enemy.GetComponent<phishingMageLastLevel>();
        dosLastLevel dosLastLevel = enemy.GetComponent<dosLastLevel>();
        iotRefLastLevel iotRefLastLevel = enemy.GetComponent<iotRefLastLevel>();
        iotTvLastLevel iotTvLastLevel = enemy.GetComponent<iotTvLastLevel>();
        iotCCTvLastLevel iotCCTvLastLevel = enemy.GetComponent<iotCCTvLastLevel>();
        mitmLastLevel mitmLastLevel = enemy.GetComponent<mitmLastLevel>();

        if (virusLastLevel != null)
        {
            virusLastLevel.enabled = true;
            virusAnimator = enemy.GetComponent<Animator>();
            virusAnimator.SetBool("On", true);
        }
        
        else if (sqliLastLevel != null)
        {
            sqliLastLevel.enabled = true;
        }

        else if (rootkitSummonLastLevel != null)
        {
            rootkitSummonLastLevel.enabled = true;
        }

        else if (spywareLastLevel != null)
        {
            spywareLastLevel.enabled = true;
        }

        else if (ransomwareLastLevel != null)
        {
            ransomwareLastLevel.enabled = true;
        }
        
        else if (phishingMeleeLastLevel != null)
        {
            phishingMeleeLastLevel.enabled = true;
        }

        else if (phishingRangeLastLevel != null)
        {
            phishingRangeLastLevel.enabled = true; 
        }
        
        else if (phishingMageLastLevel != null)
        {
            phishingMageLastLevel.enabled = true;
        }

        else if (dosLastLevel != null)
        {
            dosLastLevel.enabled = true;
        }

        else if (iotRefLastLevel != null)
        {
            iotRefLastLevel.enabled = true; 
        }

        else if (iotTvLastLevel != null)
        {
            iotTvLastLevel.enabled = true; 
        }

        else if (iotCCTvLastLevel != null)
        {
            iotCCTvLastLevel.enabled = true;
        }

        else if (mitmLastLevel != null)
        {
            mitmLastLevel.enabled = true;
        }
    }


}

using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class bossVirus : MonoBehaviour
{
    private int health = 200;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;
    private float yPositionThreshold = 0.3f;

    public GameObject virus1, virus2, virus3, virus4, virus5, virus6, virus7, virus8, virus9, virus10;

    public GameObject target;
    public PlayerController playerController;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    public GameObject headVirus1;
    public GameObject headVirus2;
    public GameObject headVirus3;

    public static int enemyKills = 0;
    public int requiredKills;

    void Start()
    {
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();
        headVirus1 = GameObject.Find("Head");
        headVirus2 = GameObject.Find("Head (1)");
        headVirus3 = GameObject.Find("Head (2)");


    }

    
    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }

        if (enemyKills == requiredKills)
        {
            RemoveInvulnerable();
            
        }

        


    }

    public void OnTriggerEnter2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            BoxCollider2D playerCapsuleCollider = GetComponent<BoxCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player
                
                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap
                    Debug.Log("Jump hit");

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold) )
                {
                    Debug.Log("hit");
                    onHit();
                   
                }
                Debug.Log(health);
              

            }

        }



    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {
            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {
                    renderer.material.color = Color.red;

                }
            }

            

            currentCooldown = hitCooldown;
            health -= 10;
            Debug.Log(health);

            foreach (UnityEngine.Transform child in targetObject.transform)
            {
                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {
                    renderer.material.color = Color.white;
                }
            }
            
            if (health <= 0)
            {
                targetObject.GetComponent<BoxCollider2D>().enabled = false;
                animate.SetTrigger("Death");
            }
            
            else if (health <= 50)
            {
                requiredKills = 10;
                Invulnerable();
                ActivateVirus(virus7);
                ActivateVirus(virus8);
                ActivateVirus(virus9);
                ActivateVirus(virus10);
            }

            else if (health <= 100)
            {
                requiredKills = 6;
                Invulnerable();
                ActivateVirus(virus4);
                ActivateVirus(virus5);
                ActivateVirus(virus6);
            }

            else if (health <= 150)
            {
                requiredKills = 3;
                Invulnerable();
                ActivateVirus(virus2);
                ActivateVirus(virus3);
            }

            else if (health <= 200)
            {
                requiredKills = 1;
                Invulnerable();
                ActivateVirus(virus1);
                
            }

        }

    }

    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            spawnCoin();


        }
    }

    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }

    public void ActivateVirus(GameObject virus)
    {
        if(virus != null)
        {
            Animator virusAnimator = virus.GetComponent<Animator>();
            virusAnimator.SetBool("On", true);

        }
       
    }

    public void Invulnerable()
    {
        
        targetObject.GetComponent<BoxCollider2D>().enabled = false;

        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
               
                renderer.material.color = Color.blue;

            }
        }

        Transform head1 = headVirus1.transform;
        Transform head2 = headVirus2.transform;
        Transform head3 = headVirus3.transform;

        Renderer rendererHead1 = head1.GetChild(1).GetComponent<Renderer>();
        if (rendererHead1 != null)
        {
            rendererHead1.material.color = Color.green;

        }

        Renderer rendererHead2 = head2.GetChild(1).GetComponent<Renderer>();
        if (rendererHead2 != null)
        {
            rendererHead2.material.color = Color.green;

        }

        Renderer rendererHead3 = head3.GetChild(1).GetComponent<Renderer>();
        if (rendererHead3 != null)
        {
            rendererHead3.material.color = Color.green;

        }



    }

   

    public void RemoveInvulnerable()
    {
        
        targetObject.GetComponent<BoxCollider2D>().enabled = true;

        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;

            }
        }
    }

    
}

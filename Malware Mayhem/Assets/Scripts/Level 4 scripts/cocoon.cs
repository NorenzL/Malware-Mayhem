using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static UnityEngine.GraphicsBuffer;

public class cocoon : MonoBehaviour
{
    // Start is called before the first frame update
    [SerializeField]
    private GameObject spyware;
    [SerializeField]
    private float currentCooldown = 0f;
    private float hitCooldown = 0.5f;

    public PlayerController playerController;
    public int numberOfEnemy = 0;
    private int spawnLimit = 1;
    private int health = 250;
    private float yPositionThreshold = 0.3f;

    public GameObject target;
    public GameObject targetObject;


    [SerializeField]
    private playerDataSo playerDataSo;
    void Start()
    {

        StartCoroutine(spawnEnemy(0, spyware));
    }

    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        if (health <= 125)
        {
            spawnLimit = 3;
        }

    }

    // Update is called once per frame
    private IEnumerator spawnEnemy(float interval, GameObject enemy)
    {
        while (true)
        {
            while (numberOfEnemy < spawnLimit)
            {
                yield return new WaitForSeconds(0);
                GameObject newEnemy = Instantiate(enemy, new Vector3(Random.Range(-0.73f, 0.99f), transform.position.y, 0), Quaternion.identity);
                newEnemy.GetComponent<spywareBoss>().enabled = true;
                numberOfEnemy++;

            }
            yield return new WaitUntil(() => numberOfEnemy == 0);
        }




    }

    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            CapsuleCollider2D playerCapsuleCollider = GetComponent<CapsuleCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {
            Renderer renderer = GetComponentInChildren<Renderer>();
            renderer.material.color = Color.red;
            currentCooldown = hitCooldown;
            health -= playerDataSo.playerDamage;

            StartCoroutine(onHitDone(renderer, Color.white, 0.3f));

            if (health <= 0)
            {
                Destroy(targetObject);
                gameManager.enemyKilled++;
            }
        }
    }

    private IEnumerator onHitDone(Renderer renderer, Color targetColor, float delay)
    {
        yield return new WaitForSeconds(delay);
        renderer.material.color = targetColor;
    }

}

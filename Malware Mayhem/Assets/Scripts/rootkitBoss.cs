using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

public class rootkitBoss : MonoBehaviour
{
    public float speed;
    public float chaseDistance;
    public float stopDistance;
    private int health = 200;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;
    private float yPositionThreshold = 0.3f;
    private float targetDistance;

    private float minYPosition = -0.25f;
    private float maxYPosition = -5.05f;
    private float minXPosition = -8f;
    private float maxXPosition = 8.62f;

    public GameObject target;
    public PlayerController playerController;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    private bool invulnerable200 = false;
    private bool invulnerable150 = false;
    private bool invulnerable100 = false;
    private bool invulnerable50 = false;
    private bool isInvi = false;
    private bool isAlive = true;
    void Start()
    {
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();
        


    }


    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {
            if (transform.position.y >= -0.25)
            {

            }
                

            if (Input.GetKeyDown(KeyCode.E) && isInvi)
            {
                RemoveInvi();
            }

            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if ((targetDistance < chaseDistance && targetDistance > stopDistance) && isAlive)
            {
                avoidPlayer();

            }
            else
            {
                stopRun();

                
            }

            if (transform.position.y >= -0.75)
            {
                transform.position = Vector2.MoveTowards(transform.position,new Vector2(transform.position.x, maxYPosition),speed * Time.deltaTime);
            }

            if (transform.position.y <= -4.93)
            {
                transform.position = Vector2.MoveTowards(transform.position, new Vector2(transform.position.x, minYPosition), speed * Time.deltaTime);
            }

            if (transform.position.x <= -8)
            {
                transform.position = Vector2.MoveTowards(transform.position, new Vector2(maxXPosition, transform.position.y), speed * Time.deltaTime);
            }

            if (transform.position.x >= 8.21)
            {
                transform.position = Vector2.MoveTowards(transform.position, new Vector2(minXPosition, transform.position.y), speed * Time.deltaTime);
            }



        }

       

    }
    void avoidPlayer()
    {
        float newXPosition = transform.position.x;


        if (playerController.canJump)
        {
            float newYPosition = target.transform.position.y;
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);



            transform.position = Vector2.MoveTowards(transform.position, target.transform.position, -speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }
        else
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);



            transform.position = Vector2.MoveTowards(transform.position, new Vector2(target.transform.position.x, transform.position.y), -speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }


    }

    void stopRun()
    {
        animate.SetFloat("Speed", 0);

        
    }

    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            BoxCollider2D playerCapsuleCollider = GetComponent<BoxCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {
            animate.SetTrigger("Hit");
            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {

                    renderer.material.color = Color.red;

                }
            }

            currentCooldown = hitCooldown;
            health -= 10;
            Debug.Log(health);




        }

    }

    public void OnHitDone()
    {
        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;

            }
        }

        if (health <= 0)
        {
            isAlive = false;
            targetObject.GetComponent<BoxCollider2D>().enabled = false;
            animate.SetTrigger("Death");
        }

        else if (health <= 50)
        {
            if (!invulnerable50)
            {
                invulnerable50 = true;
                Invisible();
                
            }

        }

        else if (health <= 100)
        {
            if (!invulnerable100)
            {
                invulnerable100 = true;
                Invisible();

            }

        }

        else if (health <= 150)
        {
            if (!invulnerable150)
            {
                invulnerable150 = true;
                Invisible();
                
            }

        }

        else if (health <= 200)
        {
            if (!invulnerable200)
            {
                invulnerable200 = true;
                Invisible();
                
            }


        }

    }
    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            gameManager.enemyKilled++;
            spawnCoin();


        }
    }

    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }

    public void Invisible()
    {
        isInvi = true;
        targetObject.GetComponent<SortingGroup>().enabled = false;
        targetObject.GetComponent<BoxCollider2D>().enabled = false;
        transform.position = new Vector3(Random.Range(-7.59f, 7.84f), Random.Range(-4.86f, -1.42f), 0f);


    }



    public void RemoveInvi()
    {
        isInvi = false;
        targetObject.GetComponent<SortingGroup>().enabled = true;
        targetObject.GetComponent<BoxCollider2D>().enabled = true;
        animate.SetTrigger("Detected");
        
    }


}

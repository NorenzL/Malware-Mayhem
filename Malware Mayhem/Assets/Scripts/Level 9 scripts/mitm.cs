using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

public class mitm : MonoBehaviour
{

    public float chaseDistance;
    public float stopDistance;
    private int health = 150;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;
    private float yPositionThreshold = 0.3f;
    private float targetDistance;

    private float tpCooldown = 3f;
    private float attackCooldown = 0f;

    public GameObject target;
    public PlayerController playerController;
    public HealthManager healthManager;

    [SerializeField]
    private playerDataSo playerDataSo;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    private bool isAlive = true;
    private bool hasTeleported = false;
    private bool isAttacking = false;

    void Start()
    {
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();



    }


    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {
            tpCooldown -= Time.deltaTime;
            if (attackCooldown > 0f)
            {
                attackCooldown -= Time.deltaTime;
            }
            
            
            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if ((targetDistance < chaseDistance && targetDistance > stopDistance) && isAlive && tpCooldown <= 0)
            {
                if (!hasTeleported)
                {
                    
                    animate.SetTrigger("Despawn");
                    targetObject.GetComponent<CircleCollider2D>().enabled = false;
                    if (isAttacking)
                    {
                        
                        isAttacking = false;
                        animate.ResetTrigger("Cast");
                    }
                    hasTeleported = true;
                }

                
            }
            else
            {
                if(targetObject.GetComponent<CircleCollider2D>().enabled == false)
                {
                    
                    targetObject.GetComponent<CircleCollider2D>().enabled = true;
                }

                if (!isAttacking && attackCooldown <= 0)
                {
                    
                    animate.SetTrigger("Cast");
                    isAttacking = true;
                }
                


            }


        }



    }


    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            CircleCollider2D playerCapsuleCollider = GetComponent<CircleCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {
            animate.SetTrigger("Hit");
            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {

                    renderer.material.color = Color.red;

                }
            }

            currentCooldown = hitCooldown;
            health -= playerDataSo.playerDamage;




        }

    }

    public void OnHitDone()
    {
        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;

            }
        }

        if (health <= 0)
        {
            isAlive = false;
            
            targetObject.GetComponent<CircleCollider2D>().enabled = false;
            animate.SetTrigger("Death");
        }


    }
    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            gameManager.enemyKilled++;
            spawnCoin();


        }
    }

    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }

    public void Teleport()
    {
        targetObject.GetComponent<CircleCollider2D>().enabled = true;
        tpCooldown = 10f;
        animate.SetTrigger("Spawn");
        hasTeleported = false;
        
        transform.position = new Vector3(Random.Range(-7.59f, 7.84f), Random.Range(-4.86f, -1.42f), 0f);
    }

    public void Attack()
    {
        playerController.onHit();
        attackCooldown = 5f;
       
        isAttacking = false;
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static UnityEngine.RuleTile.TilingRuleOutput;

public class VirusEnemy : enemy
{
    public float speed;
    public float chaseDistance;
    public float stopDistance;
    private float hitCooldown = 1f; 
    private float currentCooldown = 0f;

    private float yPositionThreshold = 0.5f;
    public GameObject target;
    private float targetDistance;
    Animator animate;


    public GameObject targetObject;
   

    private Coroutine attackCoroutine;
    void Start()
    {
        animate = GetComponent<Animator>();
        
    }

    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {
            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if (targetDistance < chaseDistance && targetDistance > stopDistance)
            {
                chasePlayer();

                if (attackCoroutine != null)
                {
                    StopCoroutine(attackCoroutine);
                    attackCoroutine = null;
                }
            }
            else
            {
                stopChasePlayer();

                if (attackCoroutine == null)
                {
                    if(Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold)
                        attackCoroutine = StartCoroutine(attack());
                }
            }
 
        }
    }
    void chasePlayer()
    {

        if (transform.position.x < target.transform.position.x)
            transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
        else
            transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);
        transform.position = Vector2.MoveTowards(transform.position, target.transform.position, speed * Time.deltaTime);
        animate.SetFloat("Speed", 1);
    }
    void stopChasePlayer()
    {
        animate.SetFloat("Speed", 0);
        /* Do Nothing */
    }

    public IEnumerator attack()
    {
        yield return new WaitForSeconds(2f);

        Debug.Log("Virus attacks");

        animate.SetTrigger("Attack");
        attackCoroutine = null;

    }

    public void OnTriggerEnter2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag
        if (other.gameObject.CompareTag("Sword"))
            if(Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold)
                onHit();
    
    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {

            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {
                    animate.SetTrigger("Hit");
                    animate.SetFloat("Speed", 0);
                    renderer.material.color = Color.red;
                    

                }
            }
            currentCooldown = hitCooldown;
        }
    }

    public void onHitDone()
    {


        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                
                
                renderer.material.color = Color.white;
            }
        }
    }

    public void alertObserver(string message)
    {
  

        if (message == "isHitEnded")
        {
            onHitDone();
        }
    }

  

}
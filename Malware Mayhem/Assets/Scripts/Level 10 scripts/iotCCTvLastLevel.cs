using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class iotCCTvLastLevel : MonoBehaviour
{
    // Start is called before the first frame update

    public GameObject shot;
    private float shotCooldown;
    public float startShotCooldown;

    public float speed;
    public float chaseDistance;
    public float stopDistance;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;

    private float yPositionThreshold = 0.3f;

    public int health = 70;
    public GameObject target;
    public PlayerController playerController;
    private float targetDistance;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    public cctvAttack cctvAttack;
    private bool isAlive;
    public bool isAttacking;

    [SerializeField]
    private playerDataSo playerDataSo;


    private Coroutine attackCoroutine;
    public spawner spawner;
    void Start()
    {
        shotCooldown = startShotCooldown;
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();
        isAlive = true;

    }

    // Update is called once per frame
    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {

            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if (transform.position.x > 8.3f)
            {
                chasePlayer();
            }
            else
            {
                if ((targetDistance < chaseDistance && targetDistance > stopDistance) && isAlive)
                {
                    chasePlayer();


                }
                else
                {
                    stopChasePlayer();

                    if (health > 0)
                    {


                        if (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold)
                            attack();

                    }

                }
            }
            

        }
    }

    void chasePlayer()
    {
        float newXPosition = transform.position.x;


        if (playerController.canJump)
        {
            float newYPosition = target.transform.position.y;
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);


            transform.position = Vector2.MoveTowards(transform.position, target.transform.position, speed * Time.deltaTime);

        }
        else
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            transform.position = Vector2.MoveTowards(transform.position, new Vector2(target.transform.position.x, transform.position.y), speed * Time.deltaTime);

        }


    }
    void stopChasePlayer()
    {


        if (isAlive)
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            if (playerController.canJump)
            {
                if ((Mathf.Abs(transform.position.y - target.transform.position.y) > yPositionThreshold) && isAlive)
                {
                    // Move towards the player's Y position while keeping the X position unchanged
                    float newXPosition = transform.position.x;
                    float newYPosition = Mathf.MoveTowards(transform.position.y, target.transform.position.y, speed * Time.deltaTime);

                    transform.position = new Vector2(newXPosition, newYPosition);
                }
            }

        }
    }

    public void attack()
    {
        if (transform.position.x < target.transform.position.x)
        {
            cctvAttack.direction = Vector2.right;
            shot.transform.localScale = new Vector3(-4, 4, 4);
        }
        else
        {
            cctvAttack.direction = Vector2.left;
            shot.transform.localScale = new Vector3(-4, 4, 4);
        }

        if (shotCooldown <= 0)
        {

            animate.SetTrigger("Attack");
            Instantiate(shot, transform.position + new Vector3(0, 1.35f, 0), transform.rotation);
            shot.GetComponent<cctvAttack>().enabled = true;
            shotCooldown = startShotCooldown;
        }
        else
        {
            shotCooldown -= Time.deltaTime;
        }



    }

    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            BoxCollider2D playerCapsuleCollider = GetComponent<BoxCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }


    public void onHit()
    {

        if (currentCooldown <= 0f)
        {

            animate.SetTrigger("Hit");


            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {

                    renderer.material.color = Color.red;

                }
            }




            currentCooldown = hitCooldown;
            health -= playerDataSo.playerDamage;

        }

    }

    public void onHitDone()
    {

        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;
            }
        }


        if (health <= 0)
        {
            isAlive = false;
            targetObject.GetComponent<BoxCollider2D>().enabled = false;
            animate.SetTrigger("Death");


        }
    }

    public void alertObserver(string message)
    {
        if (message == "AttackEnded")
        {
            isAttacking = false;
        }

        if (message == "isHitEnded")
        {
            onHitDone();
        }
    }

    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            spawner.numberOfEnemy--;
            spawnCoin();


        }
    }

    public void callStopAttack()
    {
        alertObserver("AttackEnded");

    }
    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }


}

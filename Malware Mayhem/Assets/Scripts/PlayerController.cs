using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEditorInternal.Profiling.Memory.Experimental.FileFormat;
using UnityEngine;
using static UnityEngine.GraphicsBuffer;

public class PlayerController : MonoBehaviour
{
    Rigidbody2D rb2D;
    public Animator animate;
    public Animator attackAnimate;
    GameObject sword;
    public GameObject scanPanel;

    public GameObject targetObject;
    public GameObject pauseMenu;
    public DialogueScript dialogueScript;
    public HealthManager healthManager;
    public healCount healCount;
    [SerializeField]
    private playerDataSo playerDataSo;

    private int moveSpeed;
    private int moveSpeedVertical;
    private float jumpForce;
    private float moveHorizontal;
    private float moveVertical;
    private bool isFacingRight;

    private bool isJumping;
    public bool canJump;
    public float axisY;

    public bool isAttacking;
    private bool canAttack;
    private bool isHit;
    public bool isDead;

    public float hitCooldown;
    private float currentCooldown;
    public bool dosHit;
    public bool isPaused;



    // Start is called before the first frame update
    void Awake()
    {
        rb2D = GetComponent<Rigidbody2D>();
        sword = GameObject.Find("Weapons/Antivirus Sword");
        animate = GetComponent<Animator>();
        attackAnimate = sword.GetComponentInChildren<Animator>();
        healthManager = healthManager.GetComponent<HealthManager>();
        moveSpeed = 3;
        moveSpeedVertical = 2;
        rb2D.Sleep();
        jumpForce = 8f;
        isJumping = false;
        canJump = true;
        isAttacking = false;
        isHit = false;
        canAttack = true;
        isDead = false;
        hitCooldown = 1f;
        currentCooldown = 0f;
        dosHit = false;
        isPaused = false;
        
    }
    // Update is called once per frame
    void Update()
    {
        moveHorizontal = Input.GetAxis("Horizontal");
        moveVertical = Input.GetAxis("Vertical");

        if (dosHit)
        {
            moveHorizontal = 0;
            moveVertical = 0;
            animate.SetFloat("Speed", 0);
            canJump = false;
        }
        else
        {
            animate.SetFloat("Speed", Mathf.Abs(moveHorizontal != 0 ? moveHorizontal : moveVertical));
            //canJump = true;

        }

        if (Input.GetKeyDown(KeyCode.E) && !scanPanel.activeSelf)
        {
            StartCoroutine(ActivateAndDeactivateScanPanel());
        }

        if (Input.GetKeyDown(KeyCode.Q))
        {
            if (playerDataSo.healCounter > 0 && playerDataSo.healthPoint < playerDataSo.maxHealthPoint)
            {
                healCount.DecreaseHeal(1);
                healthManager.Heal();
                

            }
            
        }

        if (Input.GetKeyDown(KeyCode.Escape))
        {
            TogglePause(); 
        }


        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }

        if (Input.GetButtonDown("Fire1") && canAttack && !isDead)
        {
            
            isAttacking = true;

            if (moveHorizontal != 0 || moveVertical != 0)
            {
                moveHorizontal = 0;
                moveVertical = 0;
                animate.SetFloat("Speed", 0);
               
            }
            
            attackAnimate.SetTrigger("Attack");

        }

        if (transform.position.y <= axisY)
            OnLanding();

        if (transform.position.y > axisY && !canJump)
        {
            if (isAttacking)
            {
                rb2D.gravityScale = 7.5f;
                rb2D.WakeUp();
            }
        }

        if (Input.GetButtonDown("Jump") && !isJumping && canJump && !isAttacking && !isDead && !isHit)
            isJumping = true;

        if (transform.position.y >= -0.25 && !isJumping && moveVertical > 0)
            moveVertical = 0f;

    }

    void FixedUpdate()
    {
        if ((moveHorizontal != 0 || moveVertical != 0) && !isAttacking && !isHit && !isDead)
        {
            Vector3 movement = new Vector3(moveHorizontal * moveSpeed, moveVertical * moveSpeedVertical, 0.0f);
            transform.position = transform.position + movement * Time.deltaTime;
        }
        
        flip(moveHorizontal);

        if (isJumping)
        {
            axisY = transform.position.y;
            rb2D.gravityScale = 1.5f;
            rb2D.WakeUp();
            rb2D.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            animate.SetTrigger("isJumping");
            isJumping = false;
            canJump = false;
        }

    }

    void OnLanding()
    {
        rb2D.gravityScale = 0f;
        rb2D.Sleep();
        axisY = transform.position.y;
        canJump = true;
        animate.ResetTrigger("isJumping");
    }

    public void TogglePause()
    {
        isPaused = !isPaused;

        if (isPaused)
        {
            PauseGame();
            PauseDialogue();
        }
        else
        {
            if (!dialogueScript.isDialogueDone)
            {
                ResumeDialogue();
                pauseMenu.SetActive(false);

            }
            else
            {
                ResumeGame();
            }
            
            
        }
    }
    public void PauseGame()
    {
        Time.timeScale = 0;
        isPaused = true;
        pauseMenu.SetActive(true);
    }

    public void ResumeGame()
    {
        Time.timeScale = 1;
        isPaused = false;
        pauseMenu.SetActive(false);

    }

    void PauseDialogue()
    {
        dialogueScript.isDialoguePaused = true;
        
    }

    void ResumeDialogue()
    {
        dialogueScript.isDialoguePaused = false;
        
    }

    void flip(float horizontal)
    {
        if ((horizontal < 0 && !isFacingRight || horizontal > 0 && isFacingRight) && !isDead)
        {
            isFacingRight = !isFacingRight;

            Vector3 scale = transform.localScale;
            scale.x *= -1;
            transform.localScale = scale;
        }
    }

    public void alertObserver(string message)
    {
        if(message == "AttackEnded")
        {
            isAttacking = false;
        }

        if(message == "isHitEnded")
        {
            onHitDone();
        }
    }

    public void onHit()
    {
        if(currentCooldown <= 0f)
        {
            if (dosHit)
            {
                canAttack = false;
                isHit = true;
                rb2D.Sleep();
                StartCoroutine(onHitDosDone(Color.white, 5f)); 

                foreach (Transform child in targetObject.transform)
                {

                    Renderer renderer1 = child.GetComponent<Renderer>();
                    if (renderer1 != null)
                    {

                        renderer1.material.color = Color.yellow;
                    }
                }

                foreach (Transform child in sword.transform)
                {

                    Renderer renderer1 = child.GetComponent<Renderer>();
                    if (renderer1 != null)
                    {
                        renderer1.material.color = Color.yellow;
                    }
                }
                

            }
            else
            {
                canAttack = false;
                isHit = true;
                animate.SetTrigger("hit");

                foreach (Transform child in targetObject.transform)
                {

                    Renderer renderer = child.GetComponent<Renderer>();
                    if (renderer != null)
                    {

                        renderer.material.color = Color.red;
                    }
                }

                foreach (Transform child in sword.transform)
                {

                    Renderer renderer = child.GetComponent<Renderer>();
                    if (renderer != null)
                    {
                        renderer.material.color = Color.red;
                    }
                }
            }

            currentCooldown = hitCooldown;
            healthManager.takeDamage(10);



            if (playerDataSo.healthPoint <= 0 && playerDataSo.playerLifeCount > 0)
            {
                playerDataSo.healthPoint = playerDataSo.maxHealthPoint;
                healthManager.healthBar.fillAmount = playerDataSo.healthPoint / playerDataSo.maxHealthPoint; ;
                playerDataSo.playerLifeCount -= 1;
            }
            if (playerDataSo.healthPoint <= 0 && playerDataSo.playerLifeCount == 0)
            {

                isDead = true;
                targetObject.GetComponent<CapsuleCollider2D>().enabled = false;
                animate.SetTrigger("Death");
                attackAnimate.SetTrigger("Despawn");
                playerDataSo.playerLifeCount -= 1;

            }

        }
        

    }
    
    public void onHitDone()
    {
        
        canAttack = true;
        isHit = false;
        foreach (Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                
                renderer.material.color = Color.white;
            }
        }

        foreach (Transform child in sword.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material.color = Color.white;
            }
        }
    }

    public void OnTriggerEnter2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Enemy" tag
        if (other.gameObject.CompareTag("Enemy"))
        {
            PolygonCollider2D enemyPolygonCollider = other.GetComponentInChildren<PolygonCollider2D>();
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            CapsuleCollider2D playerCapsuleCollider = GetComponent<CapsuleCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player
                if (enemyBoxCollider.IsTouching(playerCapsuleCollider))
                {
                    // Only apply damage if there is an overlap
                    
                    onHit();
                }
                
            } 
            else if(enemyPolygonCollider != null && playerCapsuleCollider != null)
            {
                if (enemyPolygonCollider.IsTouching(playerCapsuleCollider))
                {
                    onHit();
                }
            }
        }
   
    }

    private IEnumerator onHitDosDone(Color targetColor, float delay)
    {
        yield return new WaitForSeconds(delay);
       
        canAttack = true;
        isHit = false;
        dosHit = false;
        canJump = true;
        foreach (Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                
                renderer.material.color = targetColor;
            }
        }

        foreach (Transform child in sword.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material.color = targetColor;
            }
        }
    }

    private IEnumerator ActivateAndDeactivateScanPanel()
    {
        scanPanel.SetActive(true);

        yield return new WaitForSeconds(0.5f);

        scanPanel.SetActive(false);
    }


}

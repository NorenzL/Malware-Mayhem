using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    Rigidbody2D rb2D;
    Animator animate;

    private int moveSpeed;
    private int moveSpeedVertical;
    private float jumpForce;
    private float moveHorizontal;
    private float moveVertical;
    private bool isFacingRight;

    private bool isJumping;
    private bool canJump;
    private float axisY;

    // Start is called before the first frame update
    void Awake()
    {
        rb2D = GetComponent<Rigidbody2D>();
        animate = GetComponent<Animator>();
        moveSpeed = 3;
        moveSpeedVertical = 2;
        rb2D.Sleep();
        jumpForce = 8f;
        isJumping = false;
        canJump = true;

    }
    // Update is called once per frame
    void Update()
    {
        moveHorizontal = Input.GetAxis("Horizontal");
        moveVertical = Input.GetAxis("Vertical");

        animate.SetFloat("Speed", Mathf.Abs(moveHorizontal != 0 ? moveHorizontal : moveVertical));

        if (transform.position.y <= axisY)
            OnLanding();

        if (Input.GetButtonDown("Jump") && !isJumping && canJump)
            isJumping = true;

        if (transform.position.y >= -0.25 && !isJumping && moveVertical > 0)
            moveVertical = 0f;
  
    }

    void FixedUpdate()
    {
        Vector3 movement = new Vector3(moveHorizontal * moveSpeed, moveVertical * moveSpeedVertical, 0.0f);
        transform.position = transform.position + movement * Time.deltaTime;
        flip(moveHorizontal);

        if (isJumping)
        {
            axisY = transform.position.y;
            rb2D.gravityScale = 1.5f;
            rb2D.WakeUp();
            rb2D.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            animate.SetTrigger("isJumping");
            isJumping = false;
            canJump = false;
        }
    }

    void OnLanding()
    {
        rb2D.gravityScale = 0f;
        rb2D.Sleep();
        axisY = transform.position.y;
        canJump = true;
        animate.ResetTrigger("isJumping");
    }

    void flip(float horizontal)
    {
        if (horizontal < 0 && !isFacingRight || horizontal > 0 && isFacingRight)
        {
            isFacingRight = !isFacingRight;

            Vector3 scale = transform.localScale;
            scale.x *= -1;
            transform.localScale = scale;
        }
    }
}

using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using static UnityEngine.GraphicsBuffer;

public class PlayerController : MonoBehaviour
{
    Rigidbody2D rb2D;
    Animator animate;
    Animator attackAnimate;
    GameObject sword;

    public GameObject targetObject;
    public HealthManager healthManager;

    [SerializeField]
    private playerDataSo playerDataSo;

    private int moveSpeed;
    private int moveSpeedVertical;
    private float jumpForce;
    private float moveHorizontal;
    private float moveVertical;
    private bool isFacingRight;

    private bool isJumping;
    public bool canJump;
    public float axisY;

    public bool isAttacking;
    private bool canAttack;
    private bool isHit;
    private bool isDead;

    private float hitCooldown;
    private float currentCooldown;




    // Start is called before the first frame update
    void Awake()
    {
        rb2D = GetComponent<Rigidbody2D>();
        sword = GameObject.Find("Weapons/Antivirus Sword");
        animate = GetComponent<Animator>();
        attackAnimate = sword.GetComponentInChildren<Animator>();
        healthManager = healthManager.GetComponent<HealthManager>();
        moveSpeed = 3;
        moveSpeedVertical = 2;
        rb2D.Sleep();
        jumpForce = 8f;
        isJumping = false;
        canJump = true;
        isAttacking = false;
        isHit = false;
        canAttack = true;
        isDead = false;
        hitCooldown = 1f;
        currentCooldown = 0f;
        
    }
    // Update is called once per frame
    void Update()
    {
        moveHorizontal = Input.GetAxis("Horizontal");
        moveVertical = Input.GetAxis("Vertical");

        animate.SetFloat("Speed", Mathf.Abs(moveHorizontal != 0 ? moveHorizontal : moveVertical));

        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }

        if (Input.GetButtonDown("Fire1") && canAttack && !isDead)
        {
            
            isAttacking = true;

            if (moveHorizontal != 0 || moveVertical != 0)
            {
                moveHorizontal = 0;
                moveVertical = 0;
                animate.SetFloat("Speed", 0);
               
            }
            
            attackAnimate.SetTrigger("Attack");

        }

        if (transform.position.y <= axisY)
            OnLanding();

        if (transform.position.y > axisY && !canJump)
        {
            if (isAttacking)
            {
                rb2D.gravityScale = 7.5f;
                rb2D.WakeUp();
            }
        }

        if (Input.GetButtonDown("Jump") && !isJumping && canJump && !isAttacking && !isDead)
            isJumping = true;

        if (transform.position.y >= -0.25 && !isJumping && moveVertical > 0)
            moveVertical = 0f;

    }

    void FixedUpdate()
    {
        if ((moveHorizontal != 0 || moveVertical != 0) && !isAttacking && !isHit && !isDead)
        {
            Vector3 movement = new Vector3(moveHorizontal * moveSpeed, moveVertical * moveSpeedVertical, 0.0f);
            transform.position = transform.position + movement * Time.deltaTime;
        }
        
        flip(moveHorizontal);

        if (isJumping)
        {
            axisY = transform.position.y;
            rb2D.gravityScale = 1.5f;
            rb2D.WakeUp();
            rb2D.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            animate.SetTrigger("isJumping");
            isJumping = false;
            canJump = false;
        }

    }

    void OnLanding()
    {
        rb2D.gravityScale = 0f;
        rb2D.Sleep();
        axisY = transform.position.y;
        canJump = true;
        animate.ResetTrigger("isJumping");
    }

    void flip(float horizontal)
    {
        if ((horizontal < 0 && !isFacingRight || horizontal > 0 && isFacingRight) && !isDead)
        {
            isFacingRight = !isFacingRight;

            Vector3 scale = transform.localScale;
            scale.x *= -1;
            transform.localScale = scale;
        }
    }

    public void alertObserver(string message)
    {
        if(message == "AttackEnded")
        {
            isAttacking = false;
        }

        if(message == "isHitEnded")
        {
            onHitDone();
        }
    }

    public void onHit()
    {
        if(currentCooldown <= 0f)
        {
            canAttack = false;
            isHit = true;
            animate.SetTrigger("hit");
            foreach (Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {
                    
                    renderer.material.color = Color.red;
                }
            }

            foreach (Transform child in sword.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {
                    renderer.material.color = Color.red;
                }
            }
            currentCooldown = hitCooldown;
            healthManager.takeDamage(10);
            


            if (playerDataSo.healthPoint <= 0 && playerDataSo.playerLifeCount > 0)
            {
                playerDataSo.healthPoint = 100f;
                healthManager.healthBar.fillAmount = playerDataSo.healthPoint / 100f;
                playerDataSo.playerLifeCount -= 1;
            }
            if (playerDataSo.healthPoint <= 0 && playerDataSo.playerLifeCount == 0)
            {

                isDead = true;
                targetObject.GetComponent<CapsuleCollider2D>().enabled = false;
                animate.SetTrigger("Death");
                attackAnimate.SetTrigger("Despawn");
                playerDataSo.playerLifeCount -= 1;

            }
        }
        

    }
    
    public void onHitDone()
    {
        canAttack = true;
        isHit = false;
        foreach (Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                
                renderer.material.color = Color.white;
            }
        }

        foreach (Transform child in sword.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material.color = Color.white;
            }
        }
    }

    public void OnTriggerEnter2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Enemy" tag
        if (other.gameObject.CompareTag("Enemy"))
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            CapsuleCollider2D playerCapsuleCollider = GetComponent<CapsuleCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player
                if (enemyBoxCollider.IsTouching(playerCapsuleCollider))
                {
                    // Only apply damage if there is an overlap
                    
                    onHit();
                }
            }
        }
   
    }


}

using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class iotBoss: MonoBehaviour
{
    private int health = 200;
    private float hitCooldown = 0.5f;
    private float currentCooldown = 0f;
    private float yPositionThreshold = 0.3f;

    public GameObject target;
    public PlayerController playerController;

    Animator animate;
    Animator shieldAnimate;

    public GameObject targetObject;
    public GameObject coin;

    public GameObject shield;

    [SerializeField]
    private playerDataSo playerDataSo;

    public int enemyKills = 0;
    public int requiredKills = 3;

    private bool invulnerable200 = false;
    private bool invulnerable150 = false;
    private bool invulnerable100 = false;

    void Start()
    {
        animate = GetComponent<Animator>();
        shieldAnimate = shield.GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();



    }


    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }





    }

    public void OnTriggerStay2D(Collider2D other)
    {
        // Check if the collider's GameObject has the "Sword" tag


        if (other.gameObject.CompareTag("Sword") && playerController.isAttacking == true)
        {
            BoxCollider2D enemyBoxCollider = other.GetComponentInChildren<BoxCollider2D>();
            BoxCollider2D playerCapsuleCollider = GetComponent<BoxCollider2D>();

            if (enemyBoxCollider != null && playerCapsuleCollider != null)
            {
                // Check for overlap between the box collider of the enemy and the capsule collider of the player

                if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && !playerController.canJump)
                {
                    // Only apply damage if there is an overlap

                    onHit();
                }
                else if (enemyBoxCollider.IsTouching(playerCapsuleCollider) && (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold))
                {
                    onHit();
                }
            }

        }
    }

    public void onHit()
    {
        if (currentCooldown <= 0f)
        {
            animate.SetTrigger("Hit");
            foreach (UnityEngine.Transform child in targetObject.transform)
            {

                Renderer renderer = child.GetComponent<Renderer>();
                if (renderer != null)
                {

                    renderer.material.color = Color.red;

                }
            }




            currentCooldown = hitCooldown;
            health -= playerDataSo.playerDamage;





        }

    }

    public void OnHitDone()
    {
        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;

            }
        }


        if (health <= 0)
        {
            targetObject.GetComponent<BoxCollider2D>().enabled = false;
            animate.SetTrigger("Death");
        }


        else if (health <= 100)
        {
            if (!invulnerable100)
            {
                requiredKills = 9;
                invulnerable100 = true;
                Invulnerable();

            }

        }

        else if (health <= 150)
        {
            if (!invulnerable150)
            {
                requiredKills = 6;
                invulnerable150 = true;
                Invulnerable();

            }

        }

        else if (health <= 200)
        {
            if (!invulnerable200)
            {
                invulnerable200 = true;
                Invulnerable();
            }


        }

    }
    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            gameManager.enemyKilled++;
            spawnCoin();


        }
    }

    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }


    public void Invulnerable()
    {

        shield.SetActive(true);
        shieldAnimate.SetBool("On", true);
        Color invulColor = new Color(0, 0, 1, 0.25f);
        targetObject.GetComponent<BoxCollider2D>().enabled = false;

        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = invulColor;

            }
        }

    }



    public void RemoveInvulnerable()
    {

        targetObject.GetComponent<BoxCollider2D>().enabled = true;
        shieldAnimate.SetBool("On", false);
        foreach (UnityEngine.Transform child in targetObject.transform)
        {

            Renderer renderer = child.GetComponent<Renderer>();
            if (renderer != null)
            {

                renderer.material.color = Color.white;

            }
        }


    }


}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ransomwareBoss : MonoBehaviour
{
    // Start is called before the first frame update

    public GameObject slash;
    private float shotCooldown;
    public float startShotCooldown;

    public float speed;
    public float chaseDistance;
    public float stopDistance;
    private float currentCooldown = 0f;

    private float yPositionThreshold = 0.3f;

    public int health = 100;
    public GameObject target;
    public PlayerController playerController;
    private float targetDistance;

    Animator animate;

    public GameObject targetObject;
    public GameObject coin;

    public ransomAttack ransomAttack;
    private bool isAlive;
    public bool isAttacking;

    [SerializeField]
    private playerDataSo playerDataSo;


    private Coroutine attackCoroutine;
    void Start()
    {
        shotCooldown = startShotCooldown;
        animate = GetComponent<Animator>();
        playerController = target.GetComponent<PlayerController>();
        isAlive = true;

    }

    // Update is called once per frame
    void Update()
    {
        if (currentCooldown > 0f)
        {
            // If cooldown is active, decrement the cooldown timer
            currentCooldown -= Time.deltaTime;
        }
        else
        {

            targetDistance = Vector2.Distance(transform.position, target.transform.position);

            if (transform.position.x > 8.3f)
            {
                chasePlayer();
            }
            else
            {
                if ((targetDistance < chaseDistance && targetDistance > stopDistance) && isAlive)
                {
                    chasePlayer();


                }
                else
                {
                    stopChasePlayer();

                    if (health > 0)
                    {


                        if (Mathf.Abs(transform.position.y - target.transform.position.y) < yPositionThreshold)
                            attack();

                    }

                }
            }
            

        }
    }

    void chasePlayer()
    {
        float newXPosition = transform.position.x;


        if (playerController.canJump)
        {
            float newYPosition = target.transform.position.y;
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);


            transform.position = Vector2.MoveTowards(transform.position, target.transform.position, speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }
        else
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            transform.position = Vector2.MoveTowards(transform.position, new Vector2(target.transform.position.x, transform.position.y), speed * Time.deltaTime);
            animate.SetFloat("Speed", 1);
        }


    }
    void stopChasePlayer()
    {
        animate.SetFloat("Speed", 0);

        if (isAlive)
        {
            if (transform.position.x < target.transform.position.x)
                transform.localScale = new Vector3(-1, transform.localScale.y, transform.localScale.z);
            else
                transform.localScale = new Vector3(1, transform.localScale.y, transform.localScale.z);

            if (playerController.canJump)
            {
                if ((Mathf.Abs(transform.position.y - target.transform.position.y) > yPositionThreshold) && isAlive)
                {
                    // Move towards the player's Y position while keeping the X position unchanged
                    float newXPosition = transform.position.x;
                    float newYPosition = Mathf.MoveTowards(transform.position.y, target.transform.position.y, speed * Time.deltaTime);
                    animate.SetFloat("Speed", 1);
                    transform.position = new Vector2(newXPosition, newYPosition);
                }
            }

        }
    }

    public void attack()
    {
        if (transform.position.x < target.transform.position.x)
        {
            ransomAttack.direction = Vector2.right;
            slash.transform.localScale = new Vector3(-6.3298f, 6.3298f, 6.3298f);
        }
        else
        {
            ransomAttack.direction = Vector2.left;
            slash.transform.localScale = new Vector3(6.3298f, 6.3298f, 6.3298f);
        }

        if (shotCooldown <= 0)
        {

            animate.SetTrigger("Attack");
            Instantiate(slash, transform.position, transform.rotation);
            slash.GetComponent<ransomAttack>().enabled = true;
            shotCooldown = startShotCooldown;
        }
        else
        {
            shotCooldown -= Time.deltaTime;
        }



    }

    public void onHitDone()
    {

        if (health <= 0)
        {
            isAlive = false;
            targetObject.GetComponent<BoxCollider2D>().enabled = false;
            animate.SetTrigger("Death");


        }
    }

    public void alertObserver(string message)
    {
        if (message == "AttackEnded")
        {
            isAttacking = false;
        }

    }

    public void destroyObject(string message)
    {
        if (message == "Dead")
        {
            Destroy(targetObject);
            gameManager.enemyKilled++;
            spawnCoin();


        }
    }

    public void callStopAttack()
    {
        alertObserver("AttackEnded");

    }
    public void spawnCoin()
    {

        Vector3 spawnPosition = new Vector3(transform.position.x, transform.position.y, 0f);
        Instantiate(coin, spawnPosition, Quaternion.identity);
    }


}
